from fact import FactSet
import numpy as np
import json
import tiktoken

from typing import Tuple, List
import abc

class BaseProcessor(metaclass=abc.ABCMeta):
    """将possible matchings 转为views形式 """
    @abc.abstractmethod
    def process(self):
        """
        FactSet 是views的对象类, 定义views 相关信息和操作
        return 3个 FactSet 用于approx, Random, Brute,three methods
        """
        raise NotImplemented("implement me")

class OurProcessor(BaseProcessor):

    def __init__(self, data_path: str):
        try:
            with open(data_path, "r") as f:
                self.content = json.load(f)
        except:
            raise Exception("文件不是json 可解析模式")
        
        ## 模拟chatgpt 的tokenizer
        self.encoding = tiktoken.encoding_for_model("gpt-3.5-turbo")
    
    def process(self)->Tuple[FactSet]:
        """function for process the data generated by ourself 
        and push it into FactSet
        
        Returns:
            Tuple[FactSet]: _description_
        """
        c_set = self.content["correspondence_set"]
        # chatgpt 的tokens 的num list
        len_list = [len(self.encoding.encode(i[0][1]+i[1][1])) for i in c_set]
        matchings = self.content["matchings"]
        Views = []
        for match in matchings:
            view = []
            for c in c_set:
                if c in match:
                    view.append(1)
                else:
                    view.append(0)
            Views.append(view)
        
        approx_fact = FactSet(facts=np.array(Views), prior_p=np.array(self.content["prob_all"]), ground_true=2, len_list=len_list)
        random_fact = FactSet(facts=np.array(Views), prior_p=np.array(self.content["prob_all"]), ground_true=2, len_list=len_list)
        brute_fact = FactSet(facts=np.array(Views), prior_p=np.array(self.content["prob_all"]), ground_true=2, len_list=len_list)
        return approx_fact, random_fact, brute_fact
    
# if __name__ =="__main__":
#     processor = OurProcessor("employee.json")
#     a,b,c = processor.process()
#     print(a.num_fact(),b.len_list(),c.get_prior_p())