from fact import FactSet
import numpy as np
import json
import tiktoken

from typing import Tuple, List
import abc

class BaseProcessor(metaclass=abc.ABCMeta):
    """将possible matchings 转为views形式 """
    @abc.abstractmethod
    def process(self):
        """
        FactSet 是views的对象类, 定义views 相关信息和操作
        return 3个 FactSet 用于approx, Random, Brute,three methods
        """
        raise NotImplemented("implement me")

class OurProcessor(BaseProcessor):
    def __init__(self, data_path: str):
        try:
            with open(data_path, "r") as f:
                self.content = json.load(f)
        except:
            raise Exception("文件不是json 可解析模式")
        
        ## 模拟chatgpt 的tokenizer
        encoding = tiktoken.encoding_for_model("gpt-3.5-turbo")
    
    def process(self, path)->Tuple[FactSet]:
        """function for process the data generated by ourself 
        and push it into FactSet
        Returns:
            Tuple[FactSet]: _description_
        """
        with open(path, "r") as f:
            content = json.load(f)
        
        encoding = tiktoken.encoding_for_model("gpt-3.5-turbo")
        
        c_set = content["correspondence_set"]
        # chatgpt 的tokens 的num list
        len_list = [len(encoding.encode(i[0][1]+i[1][1])) for i in c_set]
        len_list.sort()
        least_len = sum(len_list[:3])
        matchings = content["matchings"]
        Views = []
        for match in matchings:
            view = []
            for c in c_set:
                if c in match:
                    view.append(1)
                else:
                    view.append(0)
            Views.append(view)
        return np.array(Views), np.array(content["prob_all"]), np.array(len_list), least_len, sum(len_list), c_set
    
    @staticmethod
    def create_facts(facts, prior_p, len_list, ground_true=2):
        ex_fact = FactSet(facts=facts, prior_p=prior_p, ground_true=ground_true, len_list=len_list)
        random_fact = FactSet(facts=facts, prior_p=prior_p, ground_true=ground_true, len_list=len_list)
        brute_fact = FactSet(facts=facts, prior_p=prior_p, ground_true=ground_true, len_list=len_list)
        heuristic_fact = FactSet(facts=facts, prior_p=prior_p, ground_true=ground_true, len_list=len_list)
        return ex_fact, random_fact, brute_fact, heuristic_fact
    
    
        

